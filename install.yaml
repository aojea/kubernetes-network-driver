---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: network-driver
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
     - "resource.k8s.io"
    resources: ["*"]
    verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: network-driver
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: network-driver
subjects:
- kind: ServiceAccount
  name: network-driver
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: network-driver
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: network-driver
  namespace: kube-system
  labels:
    tier: node
    app: network-driver
    k8s-app: network-driver
spec:
  selector:
    matchLabels:
      app: network-driver
  template:
    metadata:
      labels:
        tier: node
        app: network-driver
        k8s-app: network-driver
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: false
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: network-driver
      initContainers:
      - name: enable-nri
        image: alpine:3.20.2
        volumeMounts:
        - mountPath: /etc
          name: etc
        securityContext:
          privileged: true
        command:
        - /bin/bash
        - -c
        - |
          set -o errexit
          set -o pipefail
          set -o nounset
          set -x
          if grep -q "io.containerd.nri.v1.nri"  /etc/containerd/config.toml
          then
             echo "containerd config contains NRI reference already; taking no action"
          else
             echo "containerd config does not mention NRI, thus enabling it";
             printf '%s\n' "[plugins.\"io.containerd.nri.v1.nri\"]" "  disable = false" "  disable_connections = false" "  plugin_config_path = \"/etc/nri/conf.d\"" "  plugin_path = \"/opt/nri/plugins\"" "  plugin_registration_timeout = \"5s\"" "  plugin_request_timeout = \"5s\"" "  socket_path = \"/var/run/nri/nri.sock\"" >> /etc/containerd/config.toml
             echo "restarting containerd"
             nsenter -t 1 -m -u -i -n -p -- systemctl restart containerd
          fi
      containers:
      - name: network-driver
        args:
        - /driver
        - --v=4
        image: aojea/kube-network-driver:stable
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "SYS_ADMIN"]
        volumeMounts:
        - name: device-plugin
          mountPath: /var/lib/kubelet/plugins
        - name: plugin-registry
          mountPath: /var/lib/kubelet/plugins_registry
        - name: nri-plugin
          mountPath: /var/run/nri
        - name: netns
          mountPath: /var/run/netns
          mountPropagation: HostToContainer
      volumes:
      - name: device-plugin
        hostPath:
          path: /var/lib/kubelet/plugins
      - name: plugin-registry
        hostPath:
          path: /var/lib/kubelet/plugins_registry
      - name: nri-plugin
        hostPath:
          path: /var/run/nri
      - name: netns
        hostPath:
          path: /var/run/netns
      - name: etc
        hostPath:
          path: /etc
---
